name: Pull Request Checks

on:
  pull_request:
    branches: [ main, master ]
    types: [opened, synchronize, reopened]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linting
      run: |
        # 检查代码格式
        pip install flake8 black isort
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .
        isort --check-only .

    - name: Run tests
      run: |
        # 运行基础测试
        python -c "from agent_core import create_agent_core_with_llm; print('✅ 导入测试通过')"

    - name: Check for simulation code
      run: |
        # 检查是否包含模拟代码
        if grep -r "模拟\|mock\|fake" --exclude-dir=.git --exclude-dir=__pycache__ .; then
          echo "❌ 发现模拟代码，请删除后重新提交"
          exit 1
        else
          echo "✅ 未发现模拟代码"
        fi

  security-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan
      run: |
        pip install bandit
        bandit -r . -f json -o security-report.json || true
        # 检查高危问题
        if grep -q '"issue_severity": "HIGH"' security-report.json; then
          echo "❌ 发现高危安全问题"
          cat security-report.json
          exit 1
        else
          echo "✅ 安全检查通过"
        fi

  performance-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Performance test
      run: |
        # 简单的性能测试
        timeout 30 python -c "
        import asyncio
        from agent_core import create_agent_core_with_llm

        async def test():
            try:
                agent = create_agent_core_with_llm(use_m3=True)
                result = await agent.process('现在几点了？')
                print(f'✅ 性能测试通过: {result[\"status\"]}')
            except Exception as e:
                print(f'❌ 性能测试失败: {e}')
                exit(1)

        asyncio.run(test())
        " || echo "❌ 性能测试超时"
